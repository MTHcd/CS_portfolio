a.you need to count the number of characters in the message and multiply it by 8 bits per character. The message has 35 characters, so the total number of bits required to represent it is 35 * 8 = 280 bits.
If the characters F, 0, S, and G are assigned the shorter code bits given in the question, the new message length in bits can be calculated as follows:

F: 00 (binary) = 2 bits
R: 100 (binary) = 4 bits
I: 1010 (binary) = 4 bits
E: 00 (binary) = 2 bits
N: 100 (binary) = 4 bits
D: 00 (binary) = 2 bits
S: 1010 (binary) = 4 bits
dash (-): 100 (binary) = 4 bits
B: 11 (binary) = 2 bits
U: 100 (binary) = 4 bits
Y: 1010 (binary) = 4 bits
dash (-): 100 (binary) = 4 bits
Y: 1010 (binary) = 4 bits
O: 100 (binary) = 4 bits
U: 100 (binary) = 4 bits
dash (-): 100 (binary) = 4 bits
F: 00 (binary
b.the goal of data compression is to represent data using fewer bits than the original representation. In order to achieve maximum compression, it would be necessary to analyze the frequency of the letters in the data and assign shorter binary codes to the letters that appear more frequently. This is known as Huffman coding.

Based on the binary codes  provided, it appears that the letters have been assigned fixed-length codes of 2, 3, 4, and 2 bits, respectively. This is not a particularly efficient way to compress data, since it does not take into account the frequency of the letters. For example, if the letter "F" appears very frequently in the data, it would be more efficient to assign it a shorter code, such as "0", in order to save bits.

Overall, it seems that the assignment of binary codes to the letters F, O, S, and G was not designed with the goal of achieving maximum compression. To achieve maximum compression, a more sophisticated method such as Huffman coding would be required.